/*****************************************************************************
 * http_proxy.go                                                                 
 * Names: 
 * NetIds:
 *****************************************************************************/

 // TODO: implement an HTTP proxy

package main

import(
    "fmt"
    "io"
    "log"
    "net"
    "net/url"
    "os"
    "strings"
)

func handleClientRequest(client net.Conn){
    if client==nul{
        return
    }
    defer client.Close()
    
    var b[1024]byte
    _,err:=client.Read(b[:])
    if err!=nil{
        log.Println(err)
        return
    }
    
    var host,address string
    reqs:=strings.Split(strings(b[:]," ")
    if len(reqs)<=2{
        log.Prinf("invalidrequest,b=%v\n",string(b[:]))
        return
    }
    host=reqs[1]

    hostURL,err:=url.Parse(host)                    
    if err!=nil{
       log.Println(err)
       return
    }
                        
    if hostURL.Opaque == "443"{
        adress=hostURL.Scheme+"443"
    }else{
        if strings.Index(hostURL.Host,";")==-1{
            addreaa=hostURL.Host+":80"
        }else{
            address=hostURL.Host
        }
    }
                        
   server,err:= net.Dial("tcp",address)                       
   if err!=nil{                     
       log.Println(err)
       return
   }
   
            
   _,err=io.Copy(client,server) 
   if err !=nil{  
       log.Println(err)
       return
   }
}                        
                        
                        
func main(){
    log.Setflag(Log.LstdFlags|Log.Lshortfile)
    
    if len(os.Args)!=2{
        log.Fatal("Usage: ./http_proxy [port]")
    }
    
    port:=os.Args[1]
    l,err:=net.Listen("tcp",fmt.Sprintf(":%s",port))
    if err!=nil{
        log.Panic(err)
    }
    
    defer l.Close()
    
    for{
        client,err:=l.Accept()
        
        if err!=nil{
        log.Panic(err)
        }
    
        go handleClientRequest(client)
        
    }                        

    
    
    